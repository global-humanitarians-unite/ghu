# Sets up Amazon EC2 Debian Stretch instance with our application
---
- hosts: all
  remote_user: admin
  vars:
    debian_codename: stretch
    branches:
    - develop
    - master
  handlers:
  - name: restart jenkins
    become: true
    systemd:
      name: jenkins
      state: restarted
  tasks:
  - include_vars: secrets.yml
  - name: ensure apt-keys for extra repos are present
    apt_key:
      url: "{{ item }}"
      state: present
    become: true
    with_items:
    - https://pkg.jenkins.io/debian/jenkins.io.key
    - https://deb.nodesource.com/gpgkey/nodesource.gpg.key
  - name: ensure extra repositories are present
    apt_repository:
      repo: "{{ item }}"
      state: present
    become: true
    with_items:
    - deb https://deb.nodesource.com/node_6.x {{ debian_codename }} main
    - deb-src https://deb.nodesource.com/node_6.x {{ debian_codename }} main
    - deb https://pkg.jenkins.io/debian binary/
  - name: ensure dependencies are up-to-date
    apt:
      name: "{{ item }}"
      state: latest
    become: true
    with_items:
    - nginx
    - python3
    - virtualenv
    - openjdk-8-jre-headless
    - certbot
    - git
    - postgresql
    # For npm
    - nodejs
    # Needing for `become'ing an unprivileged user. See:
    # https://github.com/ansible/ansible/issues/16048#issuecomment-273367563
    - acl
    # For postgresql_* modules used below
    - python-psycopg2
    # For building pip modules
    - build-essential
    - python3-dev
  # If this isn't its own task, ansible will run (effectively) apt-get install
  # openjdk-8-jre-headless jenkins, which might install jenkins before java,
  # which will cause the installation to fail.
  - name: ensure jenkins is up-to-date
    become: true
    notify:
    - restart jenkins
    apt:
      name: jenkins
      state: latest
  - name: jenkins job directories exist
    become: true
    notify:
    - restart jenkins
    file:
      path: "/var/lib/jenkins/jobs/ghu-{{ item }}/"
      state: directory
      owner: jenkins
      group: jenkins
    with_items: "{{ branches }}"
  - name: jenkins job config.xmls exist
    become: true
    become_user: jenkins
    notify:
    - restart jenkins
    copy:
      src: "jenkins/config-{{ item }}.xml"
      dest: "/var/lib/jenkins/jobs/ghu-{{ item }}/config.xml"
    with_items: "{{ branches }}"
  - name: ensure bower is installed
    become: true
    npm:
      global: true
      name: bower
      state: latest
  - name: ghu users exist
    become: true
    user:
      name: "ghu-{{ item }}"
      state: present
    with_items: "{{ branches }}"
  - name: postgres users exist
    become: true
    become_user: postgres
    postgresql_user:
      name: "ghu-{{ item }}"
      password: "{{ vault_postgresql_password }}"
      state: present
    with_items: "{{ branches }}"
  - name: postgres databases exist
    become: true
    become_user: postgres
    postgresql_db:
      name: "ghu-{{ item }}"
      owner: "ghu-{{ item }}"
      state: present
    with_items: "{{ branches }}"
  # Used for certbot webroot validation
  - name: certbot-overlay directory exists
    become: true
    file:
      path: "/var/www/certbot-overlay/"
      state: directory
  # Now, do the work of init_deploy.sh
  - name: deploy root dir exists
    become: true
    file:
      path: "/var/www/ghu/"
      state: directory
  - name: deploy dirs exist
    become: true
    file:
      path: "/var/www/ghu/{{ item }}"
      owner: jenkins
      group: jenkins
      state: directory
    with_items: "{{ branches }}"
  - name: socket dirs exist
    become: true
    file:
      path: "/var/www/ghu/{{ item }}/sock"
      owner: "ghu-{{ item }}"
      group: "ghu-{{ item }}"
      state: directory
    with_items: "{{ branches }}"
  - name: config.ini exists
    become: true
    become_user: jenkins
    vars:
      instance: "{{ item }}"
    template:
      src: "config.deploy-example.ini"
      dest: "/var/www/ghu/{{ item }}/config.ini"
    with_items: "{{ branches }}"
  - name: deploy.config exists
    become: true
    become_user: jenkins
    vars:
      deploy_root: "/var/www/ghu/{{ item }}"
      instance: "{{ item }}"
    template:
      src: "deploy.config"
      dest: "/var/www/ghu/{{ item }}/deploy.config"
    with_items: "{{ branches }}"
  - name: deploy.sh exists
    become: true
    become_user: jenkins
    copy:
      src: "deploy.sh"
      dest: "/var/www/ghu/{{ item }}/deploy.sh"
      mode: 0755
    with_items: "{{ branches }}"
  - name: do deployment
    become: true
    become_user: jenkins
    command: "/var/www/ghu/{{ item }}/deploy.sh"
    environment:
      GHU_DEPLOY_CONFIG_PATH: "/var/www/ghu/{{ item }}/deploy.config"
    with_items: "{{ branches }}"
  - name: load sample data and set admin pass
    become: true
    become_user: "ghu-{{ item }}"
    script: load_sample_data.sh
    environment:
      # TODO: Find a more secure way to pass this password in
      GHU_ADMIN_PASSWORD: "{{ vault_django_admin_password }}"
      GHU_DEPLOY_CONFIG_PATH: "/var/www/ghu/{{ item }}/deploy.config"
    with_items: "{{ branches }}"
  - name: systemd unit symlinks exist
    become: true
    file:
      path: "/etc/systemd/system/ghu-{{ item }}.service"
      state: link
      src: "/var/www/ghu/{{ item }}/ghu-{{ item }}.service"
    with_items: "{{ branches }}"
  # For good measure. For example, if you rm -rf /var/www/ghu, systemd will
  # still have the old units opened, so you need to daemon-reload and restart
  # them even though the symlinks from /etc/ already exist, so this can't be a
  # handler for the `systemd unit symlinks exist' task
  - name: restart systemd units
    become: true
    systemd:
      daemon_reload: true
      name: "ghu-{{ item }}.service"
      state: restarted
    with_items: "{{ branches }}"
  - name: nginx default site does not exist
    become: true
    file:
      path: /etc/nginx/sites-enabled/default
      state: absent
  - name: nginx sites available
    become: true
    template:
      src: "nginx-sites/{{ item }}"
      dest: "/etc/nginx/sites-available/{{ item }}"
    with_items:
    - ghu
    - http
    - jenkins
  - name: nginx sites enabled
    become: true
    file:
      path: "/etc/nginx/sites-enabled/{{ item }}"
      state: link
      src: "../sites-available/{{ item }}"
    with_items:
    - ghu
    - http
    - jenkins
  - name: restart nginx
    become: true
    systemd:
      name: nginx
      state: restarted
  - name: request ssl certificate
    become: true
    script: request_cert.sh
    tags:
    - sslcert
  - name: configure nginx ssl
    become: true
    copy:
      src: nginx-ssl.conf
      dest: /etc/nginx/conf.d/ssl.conf
  - name: restart nginx again
    become: true
    systemd:
      name: nginx
      state: restarted
